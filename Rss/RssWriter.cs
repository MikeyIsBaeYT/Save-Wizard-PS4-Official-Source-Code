// Decompiled with JetBrains decompiler
// Type: Rss.RssWriter
// Assembly: SWPS4MAX, Version=1.0.7646.26709, Culture=neutral, PublicKeyToken=null
// MVID: 185BF9ED-B762-4AE8-B9E6-BAC5BF775B8B
// Assembly location: C:\Program Files (x86)\DataPower\Save Wizard for PS4 MAX\SWPS4MAX.exe

using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Xml;

namespace Rss
{
  public class RssWriter
  {
    private XmlTextWriter writer = (XmlTextWriter) null;
    private bool wroteStartDocument = false;
    private bool wroteChannel = false;
    private RssVersion rssVersion = RssVersion.RSS20;
    private Formatting xmlFormat = Formatting.Indented;
    private int xmlIndentation = 2;
    private const string DateTimeFormatString = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
    private RssModuleCollection _rssModules = new RssModuleCollection();

    public RssWriter(TextWriter textWriter) => this.writer = new XmlTextWriter(textWriter);

    public RssWriter(Stream stream, Encoding encoding) => this.writer = new XmlTextWriter(stream, encoding);

    public RssWriter(Stream stream) => this.writer = new XmlTextWriter(stream, Encoding.GetEncoding("ISO-8859-1"));

    public RssWriter(string fileName, Encoding encoding) => this.writer = new XmlTextWriter(fileName, encoding);

    public RssWriter(string fileName) => this.writer = new XmlTextWriter(fileName, Encoding.GetEncoding("ISO-8859-1"));

    private void BeginDocument()
    {
      if (this.wroteStartDocument)
        return;
      if (this.rssVersion == RssVersion.Empty)
        this.rssVersion = RssVersion.RSS20;
      this.writer.Formatting = this.xmlFormat;
      this.writer.Indentation = this.xmlIndentation;
      this.writer.WriteStartDocument();
      if (this.rssVersion != RssVersion.RSS20)
        this.writer.WriteComment("Generated by RSS.NET: http://rss-net.sf.net");
      switch (this.rssVersion)
      {
        case RssVersion.RSS090:
          this.writer.WriteStartElement("RDF", "rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
          break;
        case RssVersion.RSS091:
          this.writer.WriteStartElement("rss");
          this.writer.WriteDocType("rss", "-//Netscape Communications//DTD RSS 0.91//EN", "http://my.netscape.com/publish/formats/rss-0.91.dtd", (string) null);
          this.writer.WriteAttributeString("version", "0.91");
          break;
        case RssVersion.RSS092:
          this.writer.WriteStartElement("rss");
          this.writer.WriteAttributeString("version", "0.92");
          break;
        case RssVersion.RSS10:
          throw new NotSupportedException("RDF Site Summary (RSS) 1.0 is not currently supported.");
        case RssVersion.RSS20:
          this.writer.WriteStartElement("rss");
          this.writer.WriteAttributeString("version", "2.0");
          IEnumerator enumerator = this._rssModules.GetEnumerator();
          try
          {
            while (enumerator.MoveNext())
            {
              RssModule current = (RssModule) enumerator.Current;
              this.WriteAttribute("xmlns:" + current.NamespacePrefix, current.NamespaceURL.ToString(), true);
            }
            break;
          }
          finally
          {
            if (enumerator is IDisposable disposable3)
              disposable3.Dispose();
          }
      }
      this.wroteStartDocument = true;
    }

    private void writeChannel(RssChannel channel)
    {
      if (this.writer == null)
        throw new InvalidOperationException("RssWriter has been closed, and can not be written to.");
      if (channel == null)
        throw new ArgumentNullException("Channel must be instanciated with data to be written.");
      if (this.wroteChannel)
        this.writer.WriteEndElement();
      else
        this.wroteChannel = true;
      this.BeginDocument();
      this.writer.WriteStartElement(nameof (channel));
      this.WriteElement("title", channel.Title, true);
      this.WriteElement("description", channel.Description, true);
      this.WriteElement("link", channel.Link, true);
      if (channel.Image != null)
      {
        this.writer.WriteStartElement("image");
        this.WriteElement("title", channel.Image.Title, true);
        this.WriteElement("url", channel.Image.Url, true);
        this.WriteElement("link", channel.Image.Link, true);
        switch (this.rssVersion)
        {
          case RssVersion.RSS091:
          case RssVersion.RSS092:
          case RssVersion.RSS20:
            this.WriteElement("description", channel.Image.Description, false);
            this.WriteElement("width", channel.Image.Width, false);
            this.WriteElement("height", channel.Image.Height, false);
            break;
        }
        this.writer.WriteEndElement();
      }
      switch (this.rssVersion)
      {
        case RssVersion.RSS091:
        case RssVersion.RSS092:
        case RssVersion.RSS20:
          this.WriteElement("language", channel.Language, this.rssVersion == RssVersion.RSS091);
          this.WriteElement("copyright", channel.Copyright, false);
          this.WriteElement("managingEditor", channel.ManagingEditor, false);
          this.WriteElement("webMaster", channel.WebMaster, false);
          this.WriteElement("pubDate", channel.PubDate, false);
          this.WriteElement("lastBuildDate", channel.LastBuildDate, false);
          if (channel.Docs != "")
          {
            this.WriteElement("docs", channel.Docs, false);
          }
          else
          {
            switch (this.rssVersion)
            {
              case RssVersion.RSS091:
                this.WriteElement("docs", "http://my.netscape.com/publish/formats/rss-spec-0.91.html", false);
                break;
              case RssVersion.RSS092:
                this.WriteElement("docs", "http://backend.userland.com/rss092", false);
                break;
              case RssVersion.RSS20:
                this.WriteElement("docs", "http://backend.userland.com/rss", false);
                break;
            }
          }
          this.WriteElement("rating", channel.Rating, false);
          string[] strArray = new string[7]
          {
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday"
          };
          for (int index1 = 0; index1 <= 6; ++index1)
          {
            if (channel.SkipDays[index1])
            {
              this.writer.WriteStartElement("skipDays");
              for (int index2 = 0; index2 <= 6; ++index2)
              {
                if (channel.SkipDays[index2])
                  this.WriteElement("day", strArray[index2], false);
              }
              this.writer.WriteEndElement();
              break;
            }
          }
          for (int index3 = 0; index3 <= 23; ++index3)
          {
            if (channel.SkipHours[index3])
            {
              this.writer.WriteStartElement("skipHours");
              for (int index4 = 0; index4 <= 23; ++index4)
              {
                if (channel.SkipHours[index4])
                  this.WriteElement("hour", index4 + 1, false);
              }
              this.writer.WriteEndElement();
              break;
            }
          }
          break;
      }
      switch (this.rssVersion)
      {
        case RssVersion.RSS092:
        case RssVersion.RSS20:
          if (channel.Categories != null)
          {
            foreach (RssCategory category in (CollectionBase) channel.Categories)
            {
              if (category.Name != "")
              {
                this.writer.WriteStartElement("category");
                this.WriteAttribute("domain", category.Domain, false);
                this.writer.WriteString(category.Name);
                this.writer.WriteEndElement();
              }
            }
          }
          if (channel.Cloud != null)
          {
            this.writer.WriteStartElement("cloud");
            this.WriteElement("domain", channel.Cloud.Domain, false);
            this.WriteElement("port", channel.Cloud.Port, false);
            this.WriteElement("path", channel.Cloud.Path, false);
            this.WriteElement("registerProcedure", channel.Cloud.RegisterProcedure, false);
            if ((uint) channel.Cloud.Protocol > 0U)
              this.WriteElement("Protocol", (object) channel.Cloud.Protocol, false);
            this.writer.WriteEndElement();
            break;
          }
          break;
      }
      if (this.rssVersion == RssVersion.RSS20)
      {
        if (channel.Generator != "")
          this.WriteElement("generator", channel.Generator, false);
        else
          this.WriteElement("generator", "RSS.NET: http://www.rssdotnet.com/", false);
        this.WriteElement("ttl", channel.TimeToLive, false);
        foreach (RssModule rssModule in (CollectionBase) this._rssModules)
        {
          if (rssModule.IsBoundTo(channel.GetHashCode()))
          {
            foreach (RssModuleItem channelExtension in (CollectionBase) rssModule.ChannelExtensions)
            {
              if (channelExtension.SubElements.Count == 0)
                this.WriteElement(rssModule.NamespacePrefix + ":" + channelExtension.Name, channelExtension.Text, channelExtension.IsRequired);
              else
                this.writeSubElements(channelExtension.SubElements, rssModule.NamespacePrefix);
            }
          }
        }
      }
      if (channel.TextInput != null)
      {
        this.writer.WriteStartElement("textinput");
        this.WriteElement("title", channel.TextInput.Title, true);
        this.WriteElement("description", channel.TextInput.Description, true);
        this.WriteElement("name", channel.TextInput.Name, true);
        this.WriteElement("link", channel.TextInput.Link, true);
        this.writer.WriteEndElement();
      }
      foreach (RssItem rssItem in (CollectionBase) channel.Items)
        this.writeItem(rssItem, channel.GetHashCode());
      this.writer.Flush();
    }

    private void writeItem(RssItem item, int channelHashCode)
    {
      if (this.writer == null)
        throw new InvalidOperationException("RssWriter has been closed, and can not be written to.");
      if (item == null)
        throw new ArgumentNullException("Item must be instanciated with data to be written.");
      if (!this.wroteChannel)
        throw new InvalidOperationException("Channel must be written first, before writing an item.");
      this.BeginDocument();
      this.writer.WriteStartElement(nameof (item));
      switch (this.rssVersion)
      {
        case RssVersion.RSS090:
        case RssVersion.RSS091:
        case RssVersion.RSS10:
          this.WriteElement("title", item.Title, true);
          this.WriteElement("description", item.Description, false);
          this.WriteElement("link", item.Link, true);
          break;
        case RssVersion.RSS092:
          this.WriteElement("title", item.Title, false);
          this.WriteElement("description", item.Description, false);
          this.WriteElement("link", item.Link, false);
          if (item.Source != null)
          {
            this.writer.WriteStartElement("source");
            this.WriteAttribute("url", item.Source.Url, true);
            this.writer.WriteString(item.Source.Name);
            this.writer.WriteEndElement();
          }
          if (item.Enclosure != null)
          {
            this.writer.WriteStartElement("enclosure");
            this.WriteAttribute("url", item.Enclosure.Url, true);
            this.WriteAttribute("length", item.Enclosure.Length, true);
            this.WriteAttribute("type", item.Enclosure.Type, true);
            this.writer.WriteEndElement();
          }
          IEnumerator enumerator = item.Categories.GetEnumerator();
          try
          {
            while (enumerator.MoveNext())
            {
              RssCategory current = (RssCategory) enumerator.Current;
              if (current.Name != "")
              {
                this.writer.WriteStartElement("category");
                this.WriteAttribute("domain", current.Domain, false);
                this.writer.WriteString(current.Name);
                this.writer.WriteEndElement();
              }
            }
            break;
          }
          finally
          {
            if (enumerator is IDisposable disposable3)
              disposable3.Dispose();
          }
        case RssVersion.RSS20:
          if (item.Title == "" && item.Description == "")
            throw new ArgumentException("item title and description cannot be null");
          goto case RssVersion.RSS092;
      }
      if (this.rssVersion == RssVersion.RSS20)
      {
        this.WriteElement("author", item.Author, false);
        this.WriteElement("comments", item.Comments, false);
        if (item.Guid != null && item.Guid.Name != "")
        {
          this.writer.WriteStartElement("guid");
          try
          {
            this.WriteAttribute("isPermaLink", (object) (bool) item.Guid.PermaLink, false);
          }
          catch
          {
          }
          this.writer.WriteString(item.Guid.Name);
          this.writer.WriteEndElement();
        }
        this.WriteElement("pubDate", item.PubDate, false);
        foreach (RssModule rssModule in (CollectionBase) this._rssModules)
        {
          if (rssModule.IsBoundTo(channelHashCode))
          {
            foreach (RssModuleItemCollection itemExtension in (CollectionBase) rssModule.ItemExtensions)
            {
              if (itemExtension.IsBoundTo(item.GetHashCode()))
                this.writeSubElements(itemExtension, rssModule.NamespacePrefix);
            }
          }
        }
      }
      this.writer.WriteEndElement();
      this.writer.Flush();
    }

    public void Close()
    {
      if (this.writer == null)
        throw new InvalidOperationException("RssWriter has been closed, and can not be closed again.");
      if (!this.wroteChannel)
        throw new InvalidOperationException("Can't close RssWriter without first writing a channel.");
      this.writer.WriteEndElement();
      this.writer.WriteEndElement();
      this.writer.Close();
      this.writer = (XmlTextWriter) null;
    }

    public RssVersion Version
    {
      get => this.rssVersion;
      set
      {
        if (this.wroteStartDocument)
          throw new InvalidOperationException("Can't change version number after data has been written.");
        this.rssVersion = value;
      }
    }

    public Formatting XmlFormat
    {
      get => this.xmlFormat;
      set
      {
        if (this.wroteStartDocument)
          throw new InvalidOperationException("Can't change XML formatting after data has been written.");
        this.xmlFormat = value;
      }
    }

    public int XmlIndentation
    {
      get => this.xmlIndentation;
      set
      {
        if (this.wroteStartDocument)
          throw new InvalidOperationException("Can't change XML indentation after data has been written.");
        this.xmlIndentation = value >= 0 ? value : throw new ArgumentException("Setting this property to a negative value.");
      }
    }

    public void Write(RssChannel channel) => this.writeChannel(channel);

    public void Write(RssItem item) => this.writeItem(item, -1);

    public RssModuleCollection Modules
    {
      get => this._rssModules;
      set => this._rssModules = value;
    }

    private void WriteElement(string localName, DateTime input, bool required)
    {
      if (input != RssDefault.DateTime)
        this.writer.WriteElementString(localName, XmlConvert.ToString(input, "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"));
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteElement(string localName, int input, bool required)
    {
      if (input != -1)
        this.writer.WriteElementString(localName, XmlConvert.ToString(input));
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteElement(string localName, string input, bool required)
    {
      if (input != "")
        this.writer.WriteElementString(localName, input);
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteElement(string localName, Uri input, bool required)
    {
      if (input != RssDefault.Uri)
        this.writer.WriteElementString(localName, input.ToString());
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteElement(string localName, object input, bool required)
    {
      if (input != null)
        this.writer.WriteElementString(localName, input.ToString());
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteAttribute(string localName, DateTime input, bool required)
    {
      if (input != RssDefault.DateTime)
        this.writer.WriteAttributeString(localName, XmlConvert.ToString(input, "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"));
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteAttribute(string localName, int input, bool required)
    {
      if (input != -1)
        this.writer.WriteAttributeString(localName, XmlConvert.ToString(input));
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteAttribute(string localName, string input, bool required)
    {
      if (input != "")
        this.writer.WriteAttributeString(localName, input);
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteAttribute(string localName, Uri input, bool required)
    {
      if (input != RssDefault.Uri)
        this.writer.WriteAttributeString(localName, input.ToString());
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void WriteAttribute(string localName, object input, bool required)
    {
      if (input != null)
        this.writer.WriteAttributeString(localName, input.ToString());
      else if (required)
        throw new ArgumentException(localName + " can not be null.");
    }

    private void writeSubElements(RssModuleItemCollection items, string NamespacePrefix)
    {
      foreach (RssModuleItem rssModuleItem in (CollectionBase) items)
      {
        if (rssModuleItem.SubElements.Count == 0)
        {
          this.WriteElement(NamespacePrefix + ":" + rssModuleItem.Name, rssModuleItem.Text, rssModuleItem.IsRequired);
        }
        else
        {
          this.writer.WriteStartElement(NamespacePrefix + ":" + rssModuleItem.Name);
          this.writeSubElements(rssModuleItem.SubElements, NamespacePrefix);
          this.writer.WriteEndElement();
        }
      }
    }
  }
}
